"X", "A", 1,
"Y", "B", 2,
"Z", "C", 3
)
tibble(raw_input = input_test) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2_conv = p2, shape_score), by = c("p2"))
score_conv <- tribble(
~p2, ~p1, ~shape_score,
"X", "A", 1,
"Y", "B", 2,
"Z", "C", 3
)
tibble(raw_input = input_test) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2_conv = p2, shape_score), by = c("p2"))
tibble(raw_input = input_test) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2_conv = p1, p2, shape_score), by = c("p2" = ))
tibble(raw_input = input_test) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2_conv = p1, p2, shape_score), by = c("p2"))
"B" > "A"
tibble(raw_input = input_test) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2_conv = p1, p2, shape_score), by = c("p2")) %>%
mutate(
result_score = case_when(
p1 == p2_conv ~ 3,
p1 == "A" & p2 == "Y" ~ 6,
p1 == "B" & p2 == "Z" ~ 6,
p1 == "C" & p2 == "X" ~ 6,
TRUE ~ 0
)
)
tibble(raw_input = input_test) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2_conv = p1, p2, shape_score), by = c("p2")) %>%
mutate(
result_score = case_when(
p1 == p2_conv ~ 3,
p1 == "A" & p2 == "Y" ~ 6,
p1 == "B" & p2 == "Z" ~ 6,
p1 == "C" & p2 == "X" ~ 6,
TRUE ~ 0
),
total_score = shape_score + result_score
)
tibble(raw_input = input_test) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2_conv = p1, p2, shape_score), by = c("p2")) %>%
mutate(
result_score = case_when(
p1 == p2_conv ~ 3,
p1 == "A" & p2 == "Y" ~ 6,
p1 == "B" & p2 == "Z" ~ 6,
p1 == "C" & p2 == "X" ~ 6,
TRUE ~ 0
),
total_score = shape_score + result_score
) %>%
summarise(sum(total_score))
tibble(raw_input = input_test) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2_conv = p1, p2, shape_score), by = c("p2")) %>%
mutate(
result_score = case_when(
p1 == p2_conv ~ 3,
p1 == "A" & p2 == "Y" ~ 6,
p1 == "B" & p2 == "Z" ~ 6,
p1 == "C" & p2 == "X" ~ 6,
TRUE ~ 0
),
total_score = shape_score + result_score
) %>%
pull(total_score) %>%
sum()
assertthat::are_equal(
score_rps(input_test),
15
)
score_rps <- function(input){
tibble(raw_input = input_test) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2_conv = p1, p2, shape_score), by = c("p2")) %>%
mutate(
result_score = case_when(
p1 == p2_conv ~ 3,
p1 == "A" & p2 == "Y" ~ 6,
p1 == "B" & p2 == "Z" ~ 6,
p1 == "C" & p2 == "X" ~ 6,
TRUE ~ 0
),
total_score = shape_score + result_score
) %>%
pull(total_score) %>%
sum()
}
assertthat::are_equal(
score_rps(input_test),
15
)
input <- readLines("./data/day_2_input.txt")
score_rps(input)
score_rps <- function(input){
tibble(raw_input = input) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2_conv = p1, p2, shape_score), by = c("p2")) %>%
mutate(
result_score = case_when(
p1 == p2_conv ~ 3,
p1 == "A" & p2 == "Y" ~ 6,
p1 == "B" & p2 == "Z" ~ 6,
p1 == "C" & p2 == "X" ~ 6,
TRUE ~ 0
),
total_score = shape_score + result_score
) %>%
pull(total_score) %>%
sum()
}
assertthat::are_equal(
score_rps(input_test),
15
)
score_rps(input)
install.packages("binaryLogic")
score_conv <- tribble(
~p2, ~p1, ~shape_score, ~shape_id
"X", "A", 1, 0,
"Y", "B", 2, 1,
"Z", "C", 3, 2
)
score_conv <- tribble(
~p2, ~p1, ~shape_score, ~shape_id1
"X", "A", 1, 0,
"Y", "B", 2, 1,
"Z", "C", 3, 2
)
score_conv <- tribble(
~p2, ~p1, ~shape_score, ~shape_id,
"X", "A", 1, 0,
"Y", "B", 2, 1,
"Z", "C", 3, 2
)
int_to_unit <- function (x, adjustment=2^32) {
x <- as.numeric(x)
signs <- sign(x)
x[signs < 0] <- x[signs < 0] + adjustment
x
}
int_to_unit(-2, 2)
int_to_unit(-1, 2)
intToBits(1)
intToBits(1) - intToBits(1)
int_to_unit <- function (x, adjustment=2^32) {
x <- as.numeric(x)
signs <- sign(x)
x[signs < 0] <- adjustment - x[signs < 0] + 1
x
}
int_to_unit(-2)
int_to_unit(-2, 2)
int_to_unit <- function (x, adjustment=2^32) {
x <- as.numeric(x)
signs <- sign(x)
x[signs < 0] <- adjustment + x[signs < 0] + 1
x
}
int_to_unit(-2, 2)
int_to_unit(-1, 2)
int_to_unit(-2:2, 2)
# part 1 ----
score_rps <- function(input){
tibble(raw_input = input) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2, p2_id = shape_id, p2_score = shape_score), by = c("p2")) %>%
left_join(score_conv %>% select(p1, p1_id = shape_id, p1_score = shape_score), by = c("p1")) %>%
mutate(
result_id = int_to_unit(p1_id - p2_id),
result_score = case_when(result_id == 1 ~ 6,
result_id == 2 ~ 0,
TRUE ~ 3).
total_score = shape_score + result_score
) %>%
pull(total_score) %>%
sum()
}
assertthat::are_equal(
score_rps(input_test),
15
)
score_rps(input)
install.packages("datapasta")
# part 1 ----
score_rps <- function(input){
tibble(raw_input = input) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_conv %>% select(p2, p2_id = shape_id, p2_score = shape_score), by = c("p2")) %>%
left_join(score_conv %>% select(p1, p1_id = shape_id, p1_score = shape_score), by = c("p1")) %>%
mutate(
result_id = int_to_unit(p1_id - p2_id),
result_score = case_when(result_id == 1 ~ 6,
result_id == 2 ~ 0,
TRUE ~ 3),
total_score = shape_score + result_score
) %>%
pull(total_score) %>%
sum()
}
assertthat::are_equal(
score_rps(input_test),
15
)
# part 1 ----
score_rps <- function(input){
tibble(raw_input = input) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_table, by = c("p1", "p2")) %>%
left_join(score_conv, by = c("p2")) %>%
mutate(total_score = score + schape_score) %>%
pull(total_score) %>%
sum()
}
assertthat::are_equal(
score_rps(input_test),
15
)
score_table <- tribble(
~p1, ~p2, ~score,
"A", "X",     3L,
"A", "Y",     6L,
"A", "Z",     0L,
"B", "X",     0L,
"B", "Y",     3L,
"B", "Z",     6L,
"C", "X",     6L,
"C", "Y",     0L,
"C", "Z",     3L
)
assertthat::are_equal(
score_rps(input_test),
15
)
# part 1 ----
score_rps <- function(input){
tibble(raw_input = input) %>%
separate(raw_input, c("p1", "p2")) %>%
left_join(score_table, by = c("p1", "p2")) %>%
left_join(score_conv, by = c("p2")) %>%
mutate(total_score = score + shape_score) %>%
pull(total_score) %>%
sum()
}
assertthat::are_equal(
score_rps(input_test),
15
)
score_rps(input)
# part 2 ----
find_played <- function(p1, result){
case_when()
}
# part 2 ----
find_played <- function(p1_played, result){
desired_score = case_when(result == "X" ~ 0,
result == "Y" ~ 3,
result == "Z" ~ 6)
score_table %>%
filter(score == desired_score & p1 = p1_played) %>%
pull(p2)
}
# part 2 ----
find_played <- function(p1_played, result){
desired_score = case_when(result == "X" ~ 0,
result == "Y" ~ 3,
result == "Z" ~ 6)
score_table %>%
filter(score == desired_score & p1 = p1_played) %>%
pull(p2)
}
# part 2 ----
find_played <- function(p1_played, result){
desired_score = case_when(result == "X" ~ 0,
result == "Y" ~ 3,
result == "Z" ~ 6)
score_table %>%
filter(score == desired_score & p1 == p1_played) %>%
pull(p2)
}
find_played("Y", 6)
find_played("B", 6)
find_played("B", X)
find_played("B", "X")
score_rps_2 <- function(input){
tibble(raw_input = input) %>%
separate(raw_input, c("p1", "p2")) %>%
mutate(
p2 = mapply(find_played, p1_played = p1, result = p2)
)
# left_join(score_table, by = c("p1", "p2")) %>%
# left_join(score_conv, by = c("p2")) %>%
# mutate(total_score = score + shape_score) %>%
# pull(total_score) %>%
# sum()
}
score_rps_2(input_test)
input_test
score_rps_2 <- function(input){
tibble(raw_input = input) %>%
separate(raw_input, c("p1", "p2")) %>%
mutate(
p2 = mapply(find_played, p1_played = p1, result = p2)
) %>%
left_join(score_table, by = c("p1", "p2")) %>%
left_join(score_conv, by = c("p2")) %>%
mutate(total_score = score + shape_score) %>%
pull(total_score) %>%
sum()
}
score_rps_2(input_test)
assertthat::are_equal(
score_rps_2(input_test),
12
)
score_rps_2(input)
source("~/.active-rstudio-document", echo=TRUE)
input_test
tibble(raw_input = input_test) %>%
separate(c("elf_1", "elf_2"), ",")
tibble(raw_input = input_test)
tibble(raw_input = input_test) %>%
separate(c("elf_1", "elf_2"), sep = ",")
tibble(raw_input = input_test) %>%
separate(col = c("elf_1", "elf_2"), sep = ",")
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",")
seq(1, 5)
seq(c(1, 2), c(5, 6))
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-")
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-")
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_3_range = mapply(seq, elf_1_start, elf_1_end)
)
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_range = mapply(seq, elf_1_start, elf_1_end),
elf_2_range = mapply(seq, elf_2_start, elf_2_end)
)
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_range = mapply(seq, elf_1_start, elf_1_end),
elf_2_range = mapply(seq, elf_2_start, elf_2_end),
one_two_overlap = elf_1_range %in% elf_2_range,
two_one_overlap = elf_2_range %in% elf_1_range
)
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_range = mapply(seq, elf_1_start, elf_1_end),
elf_2_range = mapply(seq, elf_2_start, elf_2_end),
one_two_overlap = mapply(function(x, y) {x %in% y}, x = elf_1_range, y = elf_2_range),
two_one_overlap = mapply(function(x, y) {x %in% y}, x = elf_2_range, y = elf_1_range)
)
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_range = mapply(seq, elf_1_start, elf_1_end),
elf_2_range = mapply(seq, elf_2_start, elf_2_end),
one_two_overlap = mapply(function(x, y) {sum(x %in% y)}, x = elf_1_range, y = elf_2_range),
two_one_overlap = mapply(function(x, y) {sum(x %in% y)}, x = elf_2_range, y = elf_1_range)
)
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_range = mapply(seq, elf_1_start, elf_1_end),
elf_2_range = mapply(seq, elf_2_start, elf_2_end),
overlap = mapply(function(x, y) {sum(x %in% y)}, x = elf_1_range, y = elf_2_range)
)
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_range = mapply(seq, elf_1_start, elf_1_end),
elf_2_range = mapply(seq, elf_2_start, elf_2_end),
overlap = mapply(function(x, y) {sum(x %in% y)}, x = elf_1_range, y = elf_2_range),
max_len = pmax(sapply(elf_1_range, length), sapply(elf_2_range, length))
)
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_range = mapply(seq, elf_1_start, elf_1_end),
elf_2_range = mapply(seq, elf_2_start, elf_2_end),
overlap = mapply(function(x, y) {sum(x %in% y)}, x = elf_1_range, y = elf_2_range),
max_len = pmin(sapply(elf_1_range, length), sapply(elf_2_range, length))
)
process_input <- function(input){
tibble(raw_input = input_test) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_range = mapply(seq, elf_1_start, elf_1_end),
elf_2_range = mapply(seq, elf_2_start, elf_2_end),
overlap = mapply(function(x, y) {sum(x %in% y)}, x = elf_1_range, y = elf_2_range),
max_len = pmin(sapply(elf_1_range, length), sapply(elf_2_range, length))
) %>%
filter(overlap == max_len) %>%
nrow()
}
process_input <- function(input){
tibble(raw_input = input) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_range = mapply(seq, elf_1_start, elf_1_end),
elf_2_range = mapply(seq, elf_2_start, elf_2_end),
overlap = mapply(function(x, y) {sum(x %in% y)}, x = elf_1_range, y = elf_2_range),
max_len = pmin(sapply(elf_1_range, length), sapply(elf_2_range, length))
) %>%
filter(overlap == max_len) %>%
nrow()
}
# part 1 ----
assertthat::are_equal(
process_input(input_test),
2
)
process_input(input)
process_input <- function(input){
tibble(raw_input = input) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_range = mapply(seq, elf_1_start, elf_1_end),
elf_2_range = mapply(seq, elf_2_start, elf_2_end),
overlap = mapply(function(x, y) {sum(x %in% y)}, x = elf_1_range, y = elf_2_range),
max_len = pmin(sapply(elf_1_range, length), sapply(elf_2_range, length))
)
}
count_pt_1 <- function(input){
process_input(input) %>%
filter(overlap == max_len) %>%
nrow()
}
assertthat::are_equal(
process_input(input_test),
2
)
process_input <- function(input){
tibble(raw_input = input) %>%
separate(raw_input, c("elf_1", "elf_2"), sep = ",") %>%
separate(elf_1, c("elf_1_start", "elf_1_end"), "-") %>%
separate(elf_2, c("elf_2_start", "elf_2_end"), "-") %>%
mutate(
elf_1_range = mapply(seq, elf_1_start, elf_1_end),
elf_2_range = mapply(seq, elf_2_start, elf_2_end),
overlap = mapply(function(x, y) {sum(x %in% y)}, x = elf_1_range, y = elf_2_range),
max_len = pmin(sapply(elf_1_range, length), sapply(elf_2_range, length))
)
}
count_pt_1 <- function(input){
process_input(input) %>%
filter(overlap == max_len) %>%
nrow()
}
assertthat::are_equal(
process_input(input_test),
2
)
process_input(input)
assertthat::are_equal(
count_pt_1(input_test),
2
)
count_pt_1(input)
count_pt_2 <- function(input){
process_input(input) %>%
filter(overlap > 0) %>%
nrow()
}
assertthat::are_equal(
count_pt_2(input_test),
4
)
count_pt_2(input)
